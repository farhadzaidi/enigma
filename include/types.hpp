#pragma once

#include <array>
#include <cstddef>
#include <cstdint>

// --- Board Constants ---

constexpr int NUM_SQUARES    = 64;
constexpr int NUM_COLORS     = 2;
constexpr int NUM_PIECES     = 6;
constexpr int BOARD_SIZE     = 8;

// --- Type Definitions ---

using Bitboard          = uint64_t;
using MagicNumber       = uint64_t;
using Move              = uint16_t;
using MoveType          = uint16_t;
using MoveFlag          = uint16_t;
using Square            = uint8_t;
using Color             = uint8_t;
using Piece             = uint8_t;
using CastlingRights    = uint8_t;
using Rank              = uint8_t;
using File              = uint8_t;
using Direction         = int;
using AttackMap         = std::array<Bitboard, NUM_SQUARES>;
using BlockerMap        = std::array<Bitboard, NUM_SQUARES>;
using MagicMap          = std::array<MagicNumber, NUM_SQUARES>;

// --- Enums ---

enum SquareEnum : Square {
    A1, B1, C1, D1, E1, F1, G1, H1,
    A2, B2, C2, D2, E2, F2, G2, H2,
    A3, B3, C3, D3, E3, F3, G3, H3,
    A4, B4, C4, D4, E4, F4, G4, H4,
    A5, B5, C5, D5, E5, F5, G5, H5,
    A6, B6, C6, D6, E6, F6, G6, H6,
    A7, B7, C7, D7, E7, F7, G7, H7,
    A8, B8, C8, D8, E8, F8, G8, H8,
};

enum DirectionEnum : Direction {
    NORTH = 8,
    EAST = 1,
    SOUTH = -NORTH,
    WEST = -EAST,

    NORTHEAST = NORTH + EAST,
    NORTHWEST = NORTH + WEST,
    SOUTHEAST = SOUTH + EAST,
    SOUTHWEST = SOUTH + WEST,

    NORTH_NORTH = NORTH + NORTH,
    SOUTH_SOUTH = SOUTH + SOUTH
};

enum RankEnum : Rank {
    RANK_1,
    RANK_2,
    RANK_3,
    RANK_4,
    RANK_5,
    RANK_6,
    RANK_7,
    RANK_8
};

enum FileEnum : File {
    A_FILE,
    B_FILE,
    C_FILE,
    D_FILE,
    E_FILE,
    F_FILE,
    G_FILE,
    H_FILE,
};

enum ColorEnum: Color {
    WHITE,
    BLACK,
    NO_COLOR
};

enum PieceEnum : Piece {
    PAWN,
    KNIGHT,
    BISHOP,
    ROOK,
    QUEEN,
    KING,
    NO_PIECE
};

enum CastlingRightsEnum : CastlingRights {
    WHITE_SHORT = 0b1,
    WHITE_LONG  = 0b10,
    BLACK_SHORT = 0b100,
    BLACK_LONG  = 0b1000
};

enum MoveTypeEnum : MoveType {
    QUIET,
    CAPTURE
};

enum MoveFlagEnum : MoveFlag {
    NORMAL,
    EN_PASSANT,
    CASTLE,
    PROMOTION_BISHOP,
    PROMOTION_KNIGHT,
    PROMOTION_ROOK,
    PROMOTION_QUEEN
};

// Bitboards

constexpr Bitboard RANK_1_MASK = 0x00000000000000FF;
constexpr Bitboard RANK_2_MASK = 0x000000000000FF00;
constexpr Bitboard RANK_3_MASK = 0x0000000000FF0000;
constexpr Bitboard RANK_4_MASK = 0x00000000FF000000;
constexpr Bitboard RANK_5_MASK = 0x000000FF00000000;
constexpr Bitboard RANK_6_MASK = 0x0000FF0000000000;
constexpr Bitboard RANK_7_MASK = 0x00FF000000000000;
constexpr Bitboard RANK_8_MASK = 0xFF00000000000000;

constexpr Bitboard A_FILE_MASK = 0x0101010101010101;
constexpr Bitboard B_FILE_MASK = 0x0202020202020202;
constexpr Bitboard C_FILE_MASK = 0x0404040404040404;
constexpr Bitboard D_FILE_MASK = 0x0808080808080808;
constexpr Bitboard E_FILE_MASK = 0x1010101010101010;
constexpr Bitboard F_FILE_MASK = 0x2020202020202020;
constexpr Bitboard G_FILE_MASK = 0x4040404040404040;
constexpr Bitboard H_FILE_MASK = 0x8080808080808080;

// --- Sentinel Values ---

constexpr Square NO_SQUARE                   = -1;
constexpr CastlingRights NO_CASTLING_RIGHTS  =  0;
constexpr Bitboard EMPTY_BITBOARD            =  0;

// --- FEN Strings ---

constexpr const char* START_POS_FEN = 
    "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w - - 0 1";
constexpr const char* KIWIPETE_FEN = 
    "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1";
constexpr const char* POSITION_3_FEN = // Castling, en passant, and promotions
    "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1";
constexpr const char* POSITION_4_FEN = // En passant legality
    "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1";
constexpr const char* POSITION_5_FEN = // Quiet move edge cases
    "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1";
constexpr const char* POSITION_6_FEN = // Promotion + check
    "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1";

// --- Magic Maps ---
// These are magic numbers which are useful for looking up attack masks for sliding pieces.
// They are generated (via brute-force) using compute_magic_numbers() inside precompute.hpp

constexpr MagicMap BISHOP_MAGIC_MAP = {
    1170937707623481440ULL,
    63126402853013504ULL,
    2308132193664766080ULL,
    2454747672088281088ULL,
    9511902309265702913ULL,
    1171504437082996800ULL,
    1302103861880766464ULL,
    1621370634927342120ULL,
    594545589904609944ULL,
    612573404398231584ULL,
    4402408653057ULL,
    1152957809982439684ULL,
    5260208775839629320ULL,
    9043002907961856ULL,
    141358380617730ULL,
    144115342779090952ULL,
    76711002410657536ULL,
    13862150041135350280ULL,
    2251868536586258ULL,
    2251817031584512ULL,
    4611844640228769920ULL,
    634452703318016ULL,
    1481970363105546248ULL,
    9148212767363084ULL,
    1193603435925210112ULL,
    11250282168429713410ULL,
    567631602533376ULL,
    10696599005331458ULL,
    90355666614584320ULL,
    4796334152922702080ULL,
    2254016035717632ULL,
    108386150816711688ULL,
    9605934877780228ULL,
    4616479914895872016ULL,
    565153305331713ULL,
    6918659330028077312ULL,
    649224235021631616ULL,
    2310347716945002560ULL,
    577592167219208320ULL,
    1747680366078067527ULL,
    2256678972033088ULL,
    4617317722622272518ULL,
    4611976582897453060ULL,
    576466267058219040ULL,
    20275136154334208ULL,
    2342751417866911872ULL,
    72631573502361856ULL,
    4515147192475912ULL,
    9223654130576787456ULL,
    9711196044280320ULL,
    9611114617765888ULL,
    10376444449978318916ULL,
    10378582519068098562ULL,
    9295997116398899458ULL,
    291051740304901133ULL,
    9250398393451311168ULL,
    221839666184470672ULL,
    27057341028385792ULL,
    4363715648ULL,
    198299121698769044ULL,
    591675768767552ULL,
    4035304448208683536ULL,
    4573994209273472ULL,
    2312071235812591648ULL,
};

constexpr MagicMap ROOK_MAGIC_MAP = {
    10412322889848078336ULL,
    18014535983038528ULL,
    936757592691056640ULL,
    1189003080334049316ULL,
    4683745828802662656ULL,
    1224987920792814592ULL,
    72058148091069952ULL,
    4647715914965336192ULL,
    140739791028514ULL,
    2885121195921409ULL,
    422349912412160ULL,
    288371319803216004ULL,
    36451559843825664ULL,
    1153766015437570056ULL,
    1164461996402311424ULL,
    19703265583190657ULL,
    4611721752563695620ULL,
    354317657706504ULL,
    306386062442237952ULL,
    11259548983627778ULL,
    282575768125456ULL,
    2449966997950170144ULL,
    9259405232608669714ULL,
    4906673993114779780ULL,
    19000250270302226ULL,
    5476447517776283784ULL,
    685145279841701888ULL,
    5766965979771310080ULL,
    72063095891558416ULL,
    1225051668564148352ULL,
    218987540471350273ULL,
    37159172281761873ULL,
    4647860225867513888ULL,
    9223407289950535746ULL,
    9007508496584704ULL,
    37332820124766272ULL,
    612771196114571269ULL,
    3459327687145818192ULL,
    9224357242231326976ULL,
    720576491309498628ULL,
    164417130190635008ULL,
    2467972802091687936ULL,
    9224216531041321024ULL,
    2422954192114057344ULL,
    1157451492714643584ULL,
    2814904394350602ULL,
    577023720644804613ULL,
    2252353902346244ULL,
    578853290729808128ULL,
    35255276799104ULL,
    9512922935598269696ULL,
    4900061736272920704ULL,
    17609500197120ULL,
    186903782615974016ULL,
    595038118081528320ULL,
    1171538440058077696ULL,
    10088203903085641801ULL,
    70373045481857ULL,
    36037730555199505ULL,
    18577418256451618ULL,
    1155736293299192834ULL,
    288512314986463745ULL,
    92332590622969876ULL,
    3458765631588434950ULL,
};